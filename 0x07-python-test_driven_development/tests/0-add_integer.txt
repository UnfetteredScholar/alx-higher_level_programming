The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

Importing module:
	>>> add_integer = __import__('0-add_integer').add_integer

Checking module docstring:
	>>> m = __import__('0-add_integer').__doc__
	>>> len(m) > 1
	True

Checking function docstring:
	>>> f = __import__("0-add_integer").add_integer.__doc__
	>>> len(f) > 1
	True

Checking normal addition:
	>>> add_integer(1, 2)
	3

Checking float + int:
	>>> add_integer(2.3, 2)
	4

Checking int + float:
	>>> add_integer(2, 2.82)
	4

Checking both float:
	>>> add_integer(2.45, 3.1)
	5

Checking invalid input a:
	>>> add_integer('a', 3)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

Checking invalid input b:
	>>> add_integer(3, 'b')
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

Checking a and b invalid:
	>>> add_integer((2,), {"key": "value"})
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

Checking no input arguments:
	>>> add_integer()
	Traceback (most recent call last):
	...
	TypeError: add_integer() missing 1 required positional argument: 'a'

Checking one input argument:
	>>> add_integer(7)
	105
	
Checking more than 2 args:
	>>> add_integer(1, 2, 3)
	Traceback (most recent call last):
	...
	TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Checking positive with negative:
	>>> add_integer(2, -4)
	-2

Checking negative with positive:
	>>> add_integer(-6, 8)
	2
	
Checking addition over multiple values:
	>>> [add_integer(i, i ** 2) for i in range(6)]
	[0, 2, 6, 12, 20, 30]

Checking for passed NaN:
	>>> add_integer(1, float('nan'))
	Traceback (most recent call last):
	...
	ValueError: cannot convert float NaN to integer

Checking for passed inf:
	>>> add_integer(1, float('inf'))
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

Checking super long int:
	>>> add_integer(999999999999999999999999999999, 1)
	1000000000000000000000000000000
	
Checking bool with number:
	>>> add_integer(True, 1)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

Checking number with bool:
	>>> add_integer(0, False)
	Traceback (most recent call last):
	...
	TypeError: b must be an integer
